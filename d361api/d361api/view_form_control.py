"""
    Document360 Customer API

    Document360 RESTful APIs will allow you to integrate your documentation with your software, allowing you to easily onboard new users, manage your articles and more.   You can find detailed API documentation here : [API Documentation](https://apidocs.document360.io/docs)

    The version of the OpenAPI document: 2.0
    Contact: support@document360.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr


class ViewFormControl(BaseModel):
    """
    ViewFormControl
    """
    property_key: StrictStr | None = None
    is_children: StrictInt | None = None
    view_type: StrictStr | None = None
    element_name: StrictStr | None = None
    is_children_root: StrictBool | None = None
    element_type: StrictStr | None = None
    inverted_value: StrictBool | None = None
    is_dirty: StrictBool | None = None
    __properties: ClassVar[List[str]] = ["property_key", "is_children", "view_type", "element_name", "is_children_root", "element_type", "inverted_value", "is_dirty"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ViewFormControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if property_key (nullable) is None
        # and model_fields_set contains the field
        if self.property_key is None and "property_key" in self.model_fields_set:
            _dict['property_key'] = None

        # set to None if view_type (nullable) is None
        # and model_fields_set contains the field
        if self.view_type is None and "view_type" in self.model_fields_set:
            _dict['view_type'] = None

        # set to None if element_name (nullable) is None
        # and model_fields_set contains the field
        if self.element_name is None and "element_name" in self.model_fields_set:
            _dict['element_name'] = None

        # set to None if element_type (nullable) is None
        # and model_fields_set contains the field
        if self.element_type is None and "element_type" in self.model_fields_set:
            _dict['element_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ViewFormControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "property_key": obj.get("property_key"),
            "is_children": obj.get("is_children"),
            "view_type": obj.get("view_type"),
            "element_name": obj.get("element_name"),
            "is_children_root": obj.get("is_children_root"),
            "element_type": obj.get("element_type"),
            "inverted_value": obj.get("inverted_value"),
            "is_dirty": obj.get("is_dirty")
        })
        return _obj


