[build-system]
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]
build-backend = "hatchling.build"

[project]
name = "d361api"
dynamic = ["version"]
description = "Python client for the Document360 API. (Generated by OpenAPI Generator)"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT" # Assuming MIT based on LICENSE file
keywords = ["OpenAPI", "OpenAPI-Generator", "Document360 Customer API", "Document360"]
authors = [
    { name = "Document360", email = "support@document360.com" },
    { name = "Adam Twardoch", email = "adam+github@twardoch.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "httpx>=0.25.0", # Modern HTTP client
    "python-dateutil>=2.8.2",
    "pydantic>=2.0.0",
    "typing-extensions>=4.7.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-python-dateutil>=2.8.19",
]
dev = [
    "d361api[test]",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "uv>=0.1.0",
]

[project.scripts]
d361api = "d361api.cli:main"

[project.urls]
Homepage = "https://github.com/twardoch/d361api"
Documentation = "https://github.com/twardoch/d361api#readme"
Repository = "https://github.com/twardoch/d361api.git"
Changelog = "https://github.com/twardoch/d361api/blob/main/CHANGELOG.md" # Placeholder

[tool.hatch.version]
source = "vcs"
# No version-file or path needed here if d361api/__version__.py is removed.
# hatch-vcs will then store the version directly in the package metadata.

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-python-dateutil>=2.8.19",
    "uv ; sys_platform != 'win32'",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:test}" # Corrected: test, not tests
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=d361api --cov=test {args}" # Corrected: test
lint = "ruff check . {args}" # Check all files
format = "ruff format . {args}" # Format all files
typecheck = "mypy d361api test" # Corrected: test
check = [ # Meta-script to run all checks
    "format",
    "lint",
    "typecheck",
    "test-cov",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint] # Updated to new section name
select = [
    "A", "B", "C4", "E", "F", "W", "I", "UP", "ARG", "PTH", "SIM", "TID", "RUF", "N" # Added N for naming conventions
]
ignore = [
    "E501", # Handled by ruff format
    "C901", # Allow complex functions (generated code)
    "PLR0913", # Allow many arguments (generated code)
    "PLR0912", # Allow many statements (generated code)
    "PLR2004", # Magic value comparison
    "S101", # assert_used (for tests)
    "PT001", # pytest.fixture without parentheses
    "N802", # Allow invalid function name for generated methods like "article_get"
    "N803", # Allow invalid argument name for generated methods
    "N805", # Allow first argument of a method not named "self" (e.g. "cls" in Pydantic validators)
    "N806", # Allow non-lowercase variable in function for generated code
    "N815", # Allow mixedCase variable in class scope for Pydantic model fields
]

[tool.ruff.lint.per-file-ignores] # Updated to new section name
"test/*" = ["S101", "ARG001", "ARG002", "N802", "N803"] # Allow specific rules in tests
"d361api/d361api/*" = ["PLR0913", "PLR0912", "C901", "PLR0915", "ARG002", "N802", "N803", "N806", "N815", "RET504", "F821", "UP035", "UP006", "UP007", "RUF012", "SIM108", "TC001", "TC003", "FBT001", "FBT002", "EM101", "EM102", "EM103", "PTH119", "PTH120", "PTH118", "PTH107", "B904", "W291", "B028"] # Be more lenient with generated model files initially

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with this
# Stricter options (can be enabled later)
# check_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
# no_implicit_optional = true
# warn_no_return = true
# warn_redundant_casts = true
# warn_unreachable = true
# warn_unused_ignores = true
files = ["d361api", "test"] # Corrected: test
# Allow generated pydantic models to have some typical issues without erroring
[[tool.mypy.overrides]]
module = "d361api.d361api.*"
ignore_errors = true # Be very lenient with generated models for now

# Pytest coverage configuration
[tool.coverage.run]
source = ["d361api"]
branch = true
omit = [
    "d361api/__version__.py",
    "d361api/py.typed",
    "d361api/d361api/*" # Exclude generated models from coverage for now
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "model_config = ConfigDict(.*)", # Pydantic config
    "__properties: ClassVar.*", # Pydantic internal
]
fail_under = 50 # Lower initial target due to generated code

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --show-capture=no"
testpaths = [
    "test", # Corrected path
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
asyncio_mode = "auto"
